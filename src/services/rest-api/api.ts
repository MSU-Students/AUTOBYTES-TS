/* tslint:disable */
/* eslint-disable */
/**
 * Autobytes example
 * The Autobytes API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Archived
 */
export interface Archived {
    /**
     * 
     * @type {string}
     * @memberof Archived
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof Archived
     */
    file: string;
}
/**
 * 
 * @export
 * @interface Attendance
 */
export interface Attendance {
    /**
     * 
     * @type {string}
     * @memberof Attendance
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof Attendance
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof Attendance
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof Attendance
     */
    eventName: string;
    /**
     * 
     * @type {string}
     * @memberof Attendance
     */
    amount: string;
}
/**
 * 
 * @export
 * @interface Bulletin
 */
export interface Bulletin {
    /**
     * 
     * @type {string}
     * @memberof Bulletin
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Bulletin
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof Bulletin
     */
    bulletinFrom: string;
    /**
     * 
     * @type {string}
     * @memberof Bulletin
     */
    bulletinSemester: string;
    /**
     * 
     * @type {string}
     * @memberof Bulletin
     */
    bulletinType: string;
    /**
     * 
     * @type {string}
     * @memberof Bulletin
     */
    url: string;
}
/**
 * 
 * @export
 * @interface Clearance
 */
export interface Clearance {
    /**
     * 
     * @type {string}
     * @memberof Clearance
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Clearance
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof Clearance
     */
    eventName: string;
    /**
     * 
     * @type {string}
     * @memberof Clearance
     */
    amount: string;
}
/**
 * 
 * @export
 * @interface Media
 */
export interface Media {
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    mimeType: string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    filename?: string;
}
/**
 * 
 * @export
 * @interface Records
 */
export interface Records {
    /**
     * 
     * @type {string}
     * @memberof Records
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Records
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof Records
     */
    recordsFrom: string;
    /**
     * 
     * @type {string}
     * @memberof Records
     */
    recordsSemester: string;
    /**
     * 
     * @type {string}
     * @memberof Records
     */
    recordsType: string;
    /**
     * 
     * @type {string}
     * @memberof Records
     */
    url: string;
}
/**
 * 
 * @export
 * @interface Students
 */
export interface Students {
    /**
     * 
     * @type {string}
     * @memberof Students
     */
    studentName: string;
    /**
     * 
     * @type {string}
     * @memberof Students
     */
    idNumber: string;
    /**
     * 
     * @type {string}
     * @memberof Students
     */
    gender: string;
    /**
     * 
     * @type {string}
     * @memberof Students
     */
    address: string;
    /**
     * 
     * @type {string}
     * @memberof Students
     */
    level: string;
    /**
     * 
     * @type {string}
     * @memberof Students
     */
    acadAdviser: string;
    /**
     * 
     * @type {string}
     * @memberof Students
     */
    course: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    idNumber: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add new Archived
         * @param {Archived} archived 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addArchived: async (archived: Archived, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'archived' is not null or undefined
            assertParamExists('addArchived', 'archived', archived)
            const localVarPath = `/archived/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(archived, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Attendances
         * @param {Array<Attendance>} attendance 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAttendances: async (attendance: Array<Attendance>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'attendance' is not null or undefined
            assertParamExists('addAttendances', 'attendance', attendance)
            const localVarPath = `/attendance/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attendance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Bulletin
         * @param {Bulletin} bulletin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBulletin: async (bulletin: Bulletin, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulletin' is not null or undefined
            assertParamExists('addBulletin', 'bulletin', bulletin)
            const localVarPath = `/bulletin/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulletin, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new clearance
         * @param {Clearance} clearance 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClearance: async (clearance: Clearance, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clearance' is not null or undefined
            assertParamExists('addClearance', 'clearance', clearance)
            const localVarPath = `/clearance/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clearance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new records
         * @param {Records} records 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRecords: async (records: Records, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'records' is not null or undefined
            assertParamExists('addRecords', 'records', records)
            const localVarPath = `/records/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(records, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Students
         * @param {Array<Students>} students 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStudents: async (students: Array<Students>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'students' is not null or undefined
            assertParamExists('addStudents', 'students', students)
            const localVarPath = `/students/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(students, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new users
         * @param {Array<User>} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsers: async (user: Array<User>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('addUsers', 'user', user)
            const localVarPath = `/user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Archived by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArchived: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteArchived', 'id', id)
            const localVarPath = `/archived/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Attendance by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttendance: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAttendance', 'id', id)
            const localVarPath = `/attendance/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Bulletin by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBulletin: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBulletin', 'id', id)
            const localVarPath = `/bulletin/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete clearance by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClearance: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteClearance', 'id', id)
            const localVarPath = `/clearance/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete records by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecords: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRecords', 'id', id)
            const localVarPath = `/records/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete student by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudent: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteStudent', 'id', id)
            const localVarPath = `/students/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUser', 'id', id)
            const localVarPath = `/user/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Archived by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchive: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getArchive', 'id', id)
            const localVarPath = `/archived/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Archived
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchives: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/archived/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Attendance by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendance: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAttendance', 'id', id)
            const localVarPath = `/attendance/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Attendance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendances: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/attendance/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Bulletin by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBulletin: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBulletin', 'id', id)
            const localVarPath = `/bulletin/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Bulletin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBulletins: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/bulletin/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get clearance by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClearance: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getClearance', 'id', id)
            const localVarPath = `/clearance/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all clearance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClearances: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/clearance/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Media by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMedia: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMedia', 'id', id)
            const localVarPath = `/media/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get records by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRecord', 'id', id)
            const localVarPath = `/records/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecords: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/records/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Student by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudent: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getStudent', 'id', id)
            const localVarPath = `/students/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudents: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/students/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/user/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Archived by id
         * @param {string} id 
         * @param {Archived} archived 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArchived: async (id: string, archived: Archived, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateArchived', 'id', id)
            // verify required parameter 'archived' is not null or undefined
            assertParamExists('updateArchived', 'archived', archived)
            const localVarPath = `/archived/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(archived, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Attendance by id
         * @param {string} id 
         * @param {Attendance} attendance 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttendance: async (id: string, attendance: Attendance, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAttendance', 'id', id)
            // verify required parameter 'attendance' is not null or undefined
            assertParamExists('updateAttendance', 'attendance', attendance)
            const localVarPath = `/attendance/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attendance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Bulletin by id
         * @param {string} id 
         * @param {Bulletin} bulletin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBulletin: async (id: string, bulletin: Bulletin, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBulletin', 'id', id)
            // verify required parameter 'bulletin' is not null or undefined
            assertParamExists('updateBulletin', 'bulletin', bulletin)
            const localVarPath = `/bulletin/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulletin, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update clearance by id
         * @param {string} id 
         * @param {Clearance} clearance 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClearance: async (id: string, clearance: Clearance, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateClearance', 'id', id)
            // verify required parameter 'clearance' is not null or undefined
            assertParamExists('updateClearance', 'clearance', clearance)
            const localVarPath = `/clearance/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clearance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update records by id
         * @param {string} id 
         * @param {Records} records 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecords: async (id: string, records: Records, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRecords', 'id', id)
            // verify required parameter 'records' is not null or undefined
            assertParamExists('updateRecords', 'records', records)
            const localVarPath = `/records/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(records, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update student by id
         * @param {string} id 
         * @param {Students} students 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudent: async (id: string, students: Students, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateStudent', 'id', id)
            // verify required parameter 'students' is not null or undefined
            assertParamExists('updateStudent', 'students', students)
            const localVarPath = `/students/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(students, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user by id
         * @param {string} id 
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (id: string, user: User, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('updateUser', 'user', user)
            const localVarPath = `/user/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload some media
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMedia: async (file?: any, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add new Archived
         * @param {Archived} archived 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addArchived(archived: Archived, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Archived>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addArchived(archived, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Attendances
         * @param {Array<Attendance>} attendance 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAttendances(attendance: Array<Attendance>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Attendance>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAttendances(attendance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Bulletin
         * @param {Bulletin} bulletin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBulletin(bulletin: Bulletin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bulletin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBulletin(bulletin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new clearance
         * @param {Clearance} clearance 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addClearance(clearance: Clearance, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Clearance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addClearance(clearance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new records
         * @param {Records} records 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRecords(records: Records, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Records>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRecords(records, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Students
         * @param {Array<Students>} students 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addStudents(students: Array<Students>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Students>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addStudents(students, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new users
         * @param {Array<User>} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUsers(user: Array<User>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUsers(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Archived by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteArchived(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Archived>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteArchived(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Attendance by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttendance(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attendance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAttendance(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Bulletin by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBulletin(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bulletin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBulletin(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete clearance by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClearance(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Clearance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClearance(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete records by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecords(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Records>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecords(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete student by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStudent(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Students>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStudent(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Archived by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArchive(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Archived>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArchive(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Archived
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArchives(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Archived>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArchives(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Attendance by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttendance(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attendance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttendance(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Attendance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttendances(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Attendance>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttendances(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Bulletin by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBulletin(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bulletin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBulletin(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Bulletin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBulletins(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bulletin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBulletins(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get clearance by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClearance(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Clearance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClearance(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all clearance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClearances(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Clearance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClearances(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Media by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMedia(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Media>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMedia(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get records by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecord(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Records>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecord(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecords(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Records>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecords(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Student by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudent(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Students>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudent(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudents(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Students>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudents(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Archived by id
         * @param {string} id 
         * @param {Archived} archived 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateArchived(id: string, archived: Archived, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Archived>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateArchived(id, archived, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Attendance by id
         * @param {string} id 
         * @param {Attendance} attendance 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAttendance(id: string, attendance: Attendance, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attendance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAttendance(id, attendance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Bulletin by id
         * @param {string} id 
         * @param {Bulletin} bulletin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBulletin(id: string, bulletin: Bulletin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bulletin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBulletin(id, bulletin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update clearance by id
         * @param {string} id 
         * @param {Clearance} clearance 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClearance(id: string, clearance: Clearance, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Clearance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClearance(id, clearance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update records by id
         * @param {string} id 
         * @param {Records} records 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecords(id: string, records: Records, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Records>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecords(id, records, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update student by id
         * @param {string} id 
         * @param {Students} students 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStudent(id: string, students: Students, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Students>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStudent(id, students, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update user by id
         * @param {string} id 
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(id: string, user: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload some media
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadMedia(file?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Media>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadMedia(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add new Archived
         * @param {Archived} archived 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addArchived(archived: Archived, options?: any): AxiosPromise<Archived> {
            return localVarFp.addArchived(archived, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Attendances
         * @param {Array<Attendance>} attendance 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAttendances(attendance: Array<Attendance>, options?: any): AxiosPromise<Array<Attendance>> {
            return localVarFp.addAttendances(attendance, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Bulletin
         * @param {Bulletin} bulletin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBulletin(bulletin: Bulletin, options?: any): AxiosPromise<Bulletin> {
            return localVarFp.addBulletin(bulletin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new clearance
         * @param {Clearance} clearance 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClearance(clearance: Clearance, options?: any): AxiosPromise<Clearance> {
            return localVarFp.addClearance(clearance, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new records
         * @param {Records} records 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRecords(records: Records, options?: any): AxiosPromise<Records> {
            return localVarFp.addRecords(records, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Students
         * @param {Array<Students>} students 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStudents(students: Array<Students>, options?: any): AxiosPromise<Array<Students>> {
            return localVarFp.addStudents(students, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new users
         * @param {Array<User>} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsers(user: Array<User>, options?: any): AxiosPromise<Array<User>> {
            return localVarFp.addUsers(user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any): AxiosPromise<void> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Archived by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArchived(id: string, options?: any): AxiosPromise<Archived> {
            return localVarFp.deleteArchived(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Attendance by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttendance(id: string, options?: any): AxiosPromise<Attendance> {
            return localVarFp.deleteAttendance(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Bulletin by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBulletin(id: string, options?: any): AxiosPromise<Bulletin> {
            return localVarFp.deleteBulletin(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete clearance by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClearance(id: string, options?: any): AxiosPromise<Clearance> {
            return localVarFp.deleteClearance(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete records by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecords(id: string, options?: any): AxiosPromise<Records> {
            return localVarFp.deleteRecords(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete student by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudent(id: string, options?: any): AxiosPromise<Students> {
            return localVarFp.deleteStudent(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: string, options?: any): AxiosPromise<User> {
            return localVarFp.deleteUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Archived by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchive(id: string, options?: any): AxiosPromise<Archived> {
            return localVarFp.getArchive(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Archived
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchives(options?: any): AxiosPromise<Archived> {
            return localVarFp.getArchives(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Attendance by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendance(id: string, options?: any): AxiosPromise<Attendance> {
            return localVarFp.getAttendance(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Attendance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendances(options?: any): AxiosPromise<Array<Attendance>> {
            return localVarFp.getAttendances(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Bulletin by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBulletin(id: string, options?: any): AxiosPromise<Bulletin> {
            return localVarFp.getBulletin(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Bulletin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBulletins(options?: any): AxiosPromise<Bulletin> {
            return localVarFp.getBulletins(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get clearance by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClearance(id: string, options?: any): AxiosPromise<Clearance> {
            return localVarFp.getClearance(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all clearance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClearances(options?: any): AxiosPromise<Clearance> {
            return localVarFp.getClearances(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Media by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMedia(id: string, options?: any): AxiosPromise<Media> {
            return localVarFp.getMedia(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get records by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord(id: string, options?: any): AxiosPromise<Records> {
            return localVarFp.getRecord(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecords(options?: any): AxiosPromise<Records> {
            return localVarFp.getRecords(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Student by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudent(id: string, options?: any): AxiosPromise<Students> {
            return localVarFp.getStudent(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudents(options?: any): AxiosPromise<Array<Students>> {
            return localVarFp.getStudents(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, options?: any): AxiosPromise<User> {
            return localVarFp.getUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<Array<User>> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Archived by id
         * @param {string} id 
         * @param {Archived} archived 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArchived(id: string, archived: Archived, options?: any): AxiosPromise<Archived> {
            return localVarFp.updateArchived(id, archived, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Attendance by id
         * @param {string} id 
         * @param {Attendance} attendance 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttendance(id: string, attendance: Attendance, options?: any): AxiosPromise<Attendance> {
            return localVarFp.updateAttendance(id, attendance, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Bulletin by id
         * @param {string} id 
         * @param {Bulletin} bulletin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBulletin(id: string, bulletin: Bulletin, options?: any): AxiosPromise<Bulletin> {
            return localVarFp.updateBulletin(id, bulletin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update clearance by id
         * @param {string} id 
         * @param {Clearance} clearance 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClearance(id: string, clearance: Clearance, options?: any): AxiosPromise<Clearance> {
            return localVarFp.updateClearance(id, clearance, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update records by id
         * @param {string} id 
         * @param {Records} records 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecords(id: string, records: Records, options?: any): AxiosPromise<Records> {
            return localVarFp.updateRecords(id, records, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update student by id
         * @param {string} id 
         * @param {Students} students 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudent(id: string, students: Students, options?: any): AxiosPromise<Students> {
            return localVarFp.updateStudent(id, students, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user by id
         * @param {string} id 
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(id: string, user: User, options?: any): AxiosPromise<User> {
            return localVarFp.updateUser(id, user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload some media
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMedia(file?: any, options?: any): AxiosPromise<Media> {
            return localVarFp.uploadMedia(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Add new Archived
     * @param {Archived} archived 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addArchived(archived: Archived, options?: any) {
        return DefaultApiFp(this.configuration).addArchived(archived, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Attendances
     * @param {Array<Attendance>} attendance 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addAttendances(attendance: Array<Attendance>, options?: any) {
        return DefaultApiFp(this.configuration).addAttendances(attendance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Bulletin
     * @param {Bulletin} bulletin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addBulletin(bulletin: Bulletin, options?: any) {
        return DefaultApiFp(this.configuration).addBulletin(bulletin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new clearance
     * @param {Clearance} clearance 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addClearance(clearance: Clearance, options?: any) {
        return DefaultApiFp(this.configuration).addClearance(clearance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new records
     * @param {Records} records 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addRecords(records: Records, options?: any) {
        return DefaultApiFp(this.configuration).addRecords(records, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Students
     * @param {Array<Students>} students 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addStudents(students: Array<Students>, options?: any) {
        return DefaultApiFp(this.configuration).addStudents(students, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new users
     * @param {Array<User>} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addUsers(user: Array<User>, options?: any) {
        return DefaultApiFp(this.configuration).addUsers(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetHello(options?: any) {
        return DefaultApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Archived by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteArchived(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteArchived(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Attendance by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAttendance(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteAttendance(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Bulletin by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteBulletin(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteBulletin(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete clearance by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteClearance(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteClearance(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete records by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRecords(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteRecords(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete student by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteStudent(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteStudent(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete user by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUser(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Archived by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getArchive(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getArchive(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Archived
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getArchives(options?: any) {
        return DefaultApiFp(this.configuration).getArchives(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Attendance by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAttendance(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getAttendance(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Attendance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAttendances(options?: any) {
        return DefaultApiFp(this.configuration).getAttendances(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Bulletin by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBulletin(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getBulletin(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Bulletin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBulletins(options?: any) {
        return DefaultApiFp(this.configuration).getBulletins(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get clearance by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClearance(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getClearance(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all clearance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClearances(options?: any) {
        return DefaultApiFp(this.configuration).getClearances(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Media by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMedia(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getMedia(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get records by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecord(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getRecord(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecords(options?: any) {
        return DefaultApiFp(this.configuration).getRecords(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Student by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStudent(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getStudent(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Students
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStudents(options?: any) {
        return DefaultApiFp(this.configuration).getStudents(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUser(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsers(options?: any) {
        return DefaultApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Archived by id
     * @param {string} id 
     * @param {Archived} archived 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateArchived(id: string, archived: Archived, options?: any) {
        return DefaultApiFp(this.configuration).updateArchived(id, archived, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Attendance by id
     * @param {string} id 
     * @param {Attendance} attendance 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAttendance(id: string, attendance: Attendance, options?: any) {
        return DefaultApiFp(this.configuration).updateAttendance(id, attendance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Bulletin by id
     * @param {string} id 
     * @param {Bulletin} bulletin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateBulletin(id: string, bulletin: Bulletin, options?: any) {
        return DefaultApiFp(this.configuration).updateBulletin(id, bulletin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update clearance by id
     * @param {string} id 
     * @param {Clearance} clearance 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateClearance(id: string, clearance: Clearance, options?: any) {
        return DefaultApiFp(this.configuration).updateClearance(id, clearance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update records by id
     * @param {string} id 
     * @param {Records} records 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateRecords(id: string, records: Records, options?: any) {
        return DefaultApiFp(this.configuration).updateRecords(id, records, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update student by id
     * @param {string} id 
     * @param {Students} students 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateStudent(id: string, students: Students, options?: any) {
        return DefaultApiFp(this.configuration).updateStudent(id, students, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user by id
     * @param {string} id 
     * @param {User} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUser(id: string, user: User, options?: any) {
        return DefaultApiFp(this.configuration).updateUser(id, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload some media
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadMedia(file?: any, options?: any) {
        return DefaultApiFp(this.configuration).uploadMedia(file, options).then((request) => request(this.axios, this.basePath));
    }
}


